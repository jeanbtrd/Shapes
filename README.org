#+title: Readme
#+auto_tangle: t

* Table of Contents :toc:
- [[#rectangle][Rectangle]]
  - [[#rectangleh][rectangle.h]]
  - [[#rectanglecpp][rectangle.cpp]]
- [[#rhombus][Rhombus]]
  - [[#rhombush][rhombus.h]]
  - [[#rhombuscpp][rhombus.cpp]]
- [[#main][Main]]
  - [[#setup][Setup]]
  - [[#body][body]]

* Rectangle
** rectangle.h
:properties:
:header-args: :tangle rectangle.h
:end:
*** Setup
**** Doxygen header
#+begin_src cpp
/*! \file rectangle.h
	\brief Declaration of the class Rectangle

	Details.
*/
#+end_src
**** open ifndef
#+begin_src cpp
#ifndef RECTANGLE_H
#define RECTANGLE_H
#+end_src
**** namespace
#+begin_src cpp
using namespace std;
#+end_src
*** Body
**** open
#+begin_src cpp
/// @class Rectangle
/// @brief to manage an object with the shape of a rectangle
class Rectangle
{
#+end_src
**** private descriptors
#+begin_src cpp
private:
	float width;
	float length;
#+end_src
**** public descriptors
#+begin_src cpp
public:
#+end_src
***** Constructors
#+begin_src cpp
	/// Default constructor
	Rectangle();
	/// Copy constructor
	Rectangle(const Rectangle & R);
	/// Init constructor
	Rectangle(float w, float l);
	/// Destructor
	~Rectangle();
#+end_src
***** operators
#+begin_src cpp
	/// Operators
	/// =
	Rectangle& operator=(const Rectangle &r);
	/// ==
	bool operator==(const Rectangle &r);
#+end_src
***** Functions
#+begin_src cpp
	void SetDim(float w, float l);
	void SetLength(float l);
	void SetWidth(float w);

	void GetDim(float &w, float &l);
	float GetLength();
	float GetWidth();

	float GetArea();
	float GetPerimeter();
#+end_src
*** End
**** close class
#+begin_src cpp
};
#+end_src
**** close ifndef (endif)
#+begin_src cpp
#endif
#+end_src
** rectangle.cpp
:properties:
:header-args: :tangle rectangle.cpp
:end:
*** Doxygen header
#+begin_src cpp
/// \file rectangle.cpp
///	\brief class Rectangle: implementation of the functions
///
///	Details.
///
#+end_src
*** Libraries
#+begin_src cpp
#include <iostream>

#include "rectangle.h"
#+end_src
*** Constructors
**** Default constructor
#+begin_src cpp
/// @brief default constructor
Rectangle::Rectangle()
{
	cout << "Rectangle - constructor - default" << endl;

	width = 0;
	length = 0;
}
#+end_src
**** Copy constructor
#+begin_src cpp
/// @brief copy constructor
/// @param R rectangle to copy.
Rectangle::Rectangle(const Rectangle & r)
{
	cout << "Rectangle - constructor - copy" << endl;

    width = r.width;
    length = r.length;
}
#+end_src
**** Init constructor
#+begin_src cpp
/// @brief init constructor
/// @param w width in pixels
/// @param h length in pixels
Rectangle::Rectangle(float w, float l)
{
	width = 0;
	length = 0;

	cout << "Rectangle - constructor" << endl;

	if (w <= 0) cout << "WARNING: Rectangle - constructor: width should be > 0" << endl;
	else width = w;

	if (l <= 0) cout << "WARNING: Rectangle - constructor: length should be > 0" << endl;
	else length = l;
}
#+end_src
**** Destructor
#+begin_src cpp
/// @brief destructor
Rectangle::~Rectangle()
{
	cout << "Rectangle - destructor" << endl;
}
#+end_src
*** Operators
#+begin_src cpp
/// ----------------- Operators ---------------------------
#+end_src
**** =
#+begin_src cpp
/// @brief overload of assign operator
/// @param reference to the object on the right height of the operator
/// @return reference to the object on the left height of the operator
Rectangle& Rectangle::operator=(const Rectangle &r)
{
    cout << "Rectangle - operator =" << endl;

    width = r.width;
    length = r.length;

    /// "this" is the pointer to the current object
    /// (the one who called the function).
    return *this;
}
#+end_src
**** ==
#+begin_src cpp
/// @brief overload of operator ==
/// @param reference to the object on the right height of the operator
/// @return true if the two objects have the same width and the same length, false if not.
bool Rectangle::operator==(const Rectangle &r)
{
    cout << "Rectangle - operator ==" << endl;

    return (( r.width == width && r.length == length ) ? true : false);
    //if( r.width == width && r.length == length ) return true; return false;
}
#+end_src
*** Functions
**** Set functions
***** SetWidth
#+begin_src cpp
/// @brief set width of the rectangle
/// @param w width
void Rectangle::SetWidth(float w)
{
	if (w < 0)
    {
		cout << "WARNING: Rectangle - SetWidth: width should be > 0" << endl;
		return;
	}
	width = w;
}
#+end_src
***** SetLength
#+begin_src cpp
/// @brief set length of the rectangle
/// @param l length
void Rectangle::SetLength(float l)
{
	if (l < 0)
    {
		cout << "WARNING: Rectangle - SetLength: length should be > 0" << endl;
		return;
	}
	length = l;
}
#+end_src
***** SetDim
#+begin_src cpp
/// @brief set width and length of the rectangle
/// @param w width
/// @param l length
void Rectangle::SetDim(float w, float l)
{
	SetWidth(w);
	SetLength(l);
}
#+end_src
**** Get functions
***** GetWidth
#+begin_src cpp
/// @brief get width of the object
float Rectangle::GetWidth()
{
    return width;
}
#+end_src
***** GetLength
#+begin_src cpp
/// @brief get length of the object
float Rectangle::GetLength()
{
    return length;
}
#+end_src
***** GetDim
#+begin_src cpp
/// @brief get width and length of the object
/// @param w width
/// @param l length
void Rectangle::GetDim(float &w, float &l)
{
    w=width;
    l=length;
}
#+end_src
***** GetArea
#+begin_src cpp
/// @brief calculate and return the area of the rectangle
/// @return area of the rectangle
float Rectangle::GetArea()
{
		return width * length;
}
#+end_src
***** GetPerimeter
#+begin_src cpp
/// @brief calculate and return the perimeter of the rectangle
/// @return perimeter of the rectangle
float Rectangle::GetPerimeter()
{
		return 2 * ( width + length );
}
#+end_src
* Rhombus
** rhombus.h
:properties:
:header-args: :tangle rhombus.h
:end:
*** Setup
**** Doxygen header
#+begin_src cpp
/*! \file rhombus.h
	\brief Declaration of the class Rhombus

	Details.
,*/
#+end_src
**** open ifndef
#+begin_src cpp
#ifndef RHOMBUS_H
#define RHOMBUS_H
#+end_src
**** namespace
#+begin_src cpp
using namespace std;
#+end_src
*** Body
**** open
#+begin_src cpp
/// @class Rhombus
/// @brief to manage an object with the shape of a rhombus
class Rhombus
{
#+end_src
**** private descriptors
#+begin_src cpp
private:
	float diagH;
	float diagV;

	float Side();
#+end_src
**** public descriptors
#+begin_src cpp
public:
#+end_src
***** Constructors
#+begin_src cpp
	/// @{ Constructors
	/// Default constructor
	Rhombus();
	/// Init constructor
	Rhombus(float dH, float dV);
	/// Copy constructor
	Rhombus(const Rhombus &r);
	/// Destructor
	~Rhombus();
	//@}
#+end_src
***** operators
#+begin_src cpp
	///@{ Operators
	/// =
	Rhombus& operator=(const Rhombus &r);
	/// ==
	bool operator==(const Rhombus &r);
//@}
#+end_src
***** Functions
#+begin_src cpp
	void SetDim(float dH, float dV);
	void SetDiagH(float dH);
	void SetDiagV(float dV);

	void GetDiagonals(float &dH, float &dV);
	float GetDiagH();
	float GetDiagV();
	float GetSide();

	float GetArea();
	float GetPerimeter();
#+end_src
*** End
**** close class
#+begin_src cpp
};
#+end_src
**** close ifndef (endif)
#+begin_src cpp
#endif
#+end_src
** rhombus.cpp
:properties:
:header-args: :tangle rhombus.cpp
:end:
*** Doxygen header
#+begin_src cpp
///	\file rhombus.cpp
///	\brief class Rhombus: implementation of the functions
///
///	Details.
#+end_src
*** Libraries
#+begin_src cpp
#include <iostream>
#include <cmath>

#include "rhombus.h"
#+end_src
*** Constructors
**** open doxy group
#+begin_src cpp
///@{ Constructors
#+end_src
**** Default constructor
#+begin_src cpp
///	@brief default constructor
Rhombus::Rhombus()
{
	cout << "Rhombus - constructor - default" << endl;

	diagH = (float)0;
	diagV = (float)0;
}
#+end_src
**** Copy constructor
#+begin_src cpp
///	@brief copy constructor
///	@param r rhombus to copy.
Rhombus::Rhombus(const Rhombus & r)
{
	cout << "Rhombus - constructor - copy" << endl;

    diagH = r.diagH;
    diagV = r.diagV;
}
#+end_src
**** Init constructor
#+begin_src cpp
///	@brief init constructor
///	@param dh horizontal diagonal in pixels
///	@param dv vertical diagonal in pixels
Rhombus::Rhombus(float dh, float dv)
{
	diagH = (float)0;
	diagV = (float)0;

	cout << "Rhombus - constructor" << endl;

	if (dh <= (float)0) cout << "WARNING: Rhombus - constructor: horizontal diagonal should be > 0" << endl;
	else diagH = dh;

	if (dv <= (float)0) cout << "WARNING: Rhombus - constructor: vertical diagonal should be > 0" << endl;
	else diagV = dv;
}
#+end_src
**** Destructor
#+begin_src cpp
///	@brief destructor
Rhombus::~Rhombus()
{
	cout << "Rhombus - destructor" << endl;
}
#+end_src
**** Close doxy group
#+begin_src cpp
//@}
#+end_src
*** Operators
**** open doxy group
#+begin_src cpp
///@{ operators
#+end_src
**** =
#+begin_src cpp
///	@brief overload of assign operator
///	@param reference to the object on the right height of the operator
///	@return reference to the object on the left height of the operator
Rhombus& Rhombus::operator=(const Rhombus &r)
{
		cout << "Rhombus - operator =" << endl;

		diagH = r.diagH;
		diagV = r.diagV;

		/// "this" is the pointer to the current object
		/// (the one who called the function).
		return *this;
}
#+end_src
**** ==
#+begin_src cpp
///	@brief overload of operator ==
///	@param reference to the object on the right height of the operator
///	@return true if the two objects have the same width and the same length, false if not.
bool Rhombus::operator==(const Rhombus &r)
{
		cout << "Rhombus - operator ==" << endl;
		return (( r.diagH == diagH && r.diagV == diagV ) ? true : false);
}
#+end_src
**** close doxy group
#+begin_src cpp
//@}
#+end_src
*** Functions
**** Open doxy group
#+begin_src cpp
///@{ Functions
#+end_src
**** Set functions
***** Open doxy group
#+begin_src cpp
///@{ Set functions
#+end_src
***** SetDiagH
#+begin_src cpp
///	@brief set horizontal diagonal of the rhombus
///	@param dH
void Rhombus::SetDiagH(float dH)
{
	if (dH < 0)
	{
		cout << "WARNING: Rhombus - SetDiagH: horizontal diagonal should be > 0" << endl;
		return;
	}
	diagH = dH;
}
#+end_src
***** SetDiagV
#+begin_src cpp
///	@brief set vertical diagonal of the rhombus
///	@param dV
void Rhombus::SetDiagV(float dV)
{
	if (dV < 0)
	{
		cout << "WARNING: Rhombus - SetDiagV: vertical diagonal should be > 0" << endl;
		return;
	}
	diagV = dV;
}
#+end_src
***** SetDim
#+begin_src cpp
///	@brief set both diagonals of the rhombus
///	@param dH
///	@param dV
void Rhombus::SetDim(float dH, float dV)
{
	SetDiagH(dH);
	SetDiagV(dV);
}
#+end_src
***** Close doxy group
#+begin_src cpp
//@}
#+end_src
**** Get functions
***** Open doxy group
#+begin_src cpp
///@{ Get functions
#+end_src
***** GetDiagonals
#+begin_src cpp
///	@brief get both diagonals of the rhombus
///	@param dH diagH in pixels
///	@param dV diagV in pixels
void Rhombus::GetDiagonals(float &dH, float &dV)
{
		dH=diagH;
		dV=diagV;
}
#+end_src
***** GetDiagH
#+begin_src cpp
///	@brief get horizontal diagonal of the rhombus
///	@return horizontal diagonal of the rhombus
float Rhombus::GetDiagH()
{
		return diagH;
}
#+end_src
***** GetDV
#+begin_src cpp
///	@brief get vertical diagonal of the rhombus
///	@return vertical diagonal of the rhombus
float Rhombus::GetDiagV()
{
		return diagV;
}
#+end_src
***** GetSide
#+begin_src cpp
///	@brief calculate and return the side of the rhombus
///	NB: all 4 sides of a rhombus are equal
///	@return length of the side of the rhombus
float Rhombus::GetSide()
{
		return (float)(sqrt(diagH*diagH+diagV*diagV)/2);
}
#+end_src
***** GetArea
#+begin_src cpp
///	@brief calculate and return the area of the rhombus
///	@return the area of the rhombus
float Rhombus::GetArea()
{
		return (float)(diagH * diagV)/2;
}
#+end_src
***** GetPerimeter
#+begin_src cpp
///	@brief calculate and return the perimeter of the rhombus
///	@return the perimeter of the rhombus.
float Rhombus::GetPerimeter()
{
		return (float)4*(GetSide());
}
#+end_src
***** Close doxy group
#+begin_src cpp
//@}
#+end_src
**** Close doxy group
#+begin_src cpp
//@}
#+end_src
* Main
:properties:
:header-args: :tangle main.cpp
:end:
** Setup
*** Doxygen header
#+begin_src cpp
/*!
  \file main.cpp
  \brief Fiddling with rectangles and rhombi
*/
#+end_src
*** Include libraries
#+begin_src cpp
#include <iostream>

#include "rectangle.h"
#include "rhombus.h"
#+end_src
** body
***  open
#+begin_src cpp
int main()
{
#+end_src
*** Rectangle A
The Rectangle A object, called =objRectA=, is created using the *init constructor* giving it specific values for width and length.
#+begin_src cpp
	/// Create Rectangle A giving it specific values.
	/// To do this, the init constructor is called.
	Rectangle objRectA(10,5);
#+end_src

=GetWidth= and =GetLength= are used to extract the Rectangle A dimensions just set, which are then sent to =cout= to be displayed.
#+begin_src cpp
	/// Get Rectangle A dimensions using "Get" functions.
	cout << "\nRectangle A:\n";
	/// test GetWidth:
	cout << "width: " << objRectA.GetWidth() << endl;
	/// test GetLenght:
	cout << "length: " << objRectA.GetLength() << endl;
#+end_src

=SetWidth= changes the Rectangle A width.
#+begin_src cpp
	/// Change Rectangle A width using SetWidth.
	objRectA.SetWidth(4);
	cout << "New width: " << objRectA.GetWidth() << endl;
#+end_src
*** Rectangle B
The Rectangle B object, called =objRectB=, is created using the *default constructor* so with the default values: 0 and 0.
#+begin_src cpp
	/// Create Rectangle B using the default "Rectangle" constructor.
	/// It will give it the default width and length values: 0 and 0.
	Rectangle objRectB;
	cout << "\nRectangle B:\n";
	cout << "Default values: " << "(" << objRectB.GetWidth() << ", " << objRectB.GetLength() << ")\n";
#+end_src

=SetDim= is used to give Rectangle B new values.
#+begin_src cpp
	/// Set dimensions for the Rectangle B, overwriting the defaults.
	objRectB.SetDim(3,7);
	cout << "New values: " << "(" << objRectB.GetWidth() << ", " << objRectB.GetLength() << ")\n\n";
#+end_src

- =lToPrint= and =wToPrint= integer variables are created and initialized to 0.
- They are then changed by =GetDim= to the length and width of Rectangle B.
- Finally they're sent to =cout= to be displayed.
#+begin_src cpp
	/// variables to store and then print length and width.
	/// They're needed by GetDim (indirect addressing).
	float wToPrint, lToPrint; wToPrint = lToPrint = 0.;

	/// test GetDim
	objRectA.GetDim(wToPrint,lToPrint);
	cout << "Width and length: (" << wToPrint << ", " << lToPrint << ")\n\n";
#+end_src
*** Rectangle C
=objRectC= is created inheight a pair of brackets ={  }=, which delimit its /scope/.
When the compiler encounters the closing bracket the destructor is called to get rid of rectangle C, because we're now moving outheight of its scope.
#+begin_src cpp
    /// An object's ending scope causes its destruction
    {
        Rectangle objRectC;
        cout << "Rectangle C is not yet destroyed\n";
    }
    cout << "Rectangle C is now destroyed\n";
#+end_src
*** Rectangle D
=objRectD= is created as a copy of =objRectB=.
#+begin_src cpp
    /// copy constructor creates Rectangle D as a copy of Rectangle B
    Rectangle objRectD(objRectB);
    cout << "Rectangle D (copy of Rectangle B): " << "(" << objRectD.GetWidth() << ", " << objRectD.GetLength() << ")\n";
#+end_src
*** close
#+begin_src cpp
}
#+end_src
