//---------------------------------------------------------
/**
//    @file	polygon.cpp
//    @brief	Implementation file for class Polygon
*/
//---------------------------------------------------------

#include "polygon.h"

//////////////////////////////////////////////////////////////////////////////
// fpi
// memory debug, place after includes

#ifdef DBGMEM_CRT
#undef new
#define new new(_NORMAL_BLOCK,__FILE__,__LINE__)
#endif // DBGMEM_CRT

/************************** GLOBAL FUNCTIONS AND VARIABLES ******************/

///////////////////////////////////////////////////////////////////////////
// Print operator
ostream & operator << (ostream &o, Polygon & p)
{

	return o;
}

///////////////////////////////////////////////////////////////////////////
istream & operator >> (istream &i, Polygon & p)
{

	return i;
}

/************************** MEMBER FUNCTIONS AND VARIABLES ******************/

///////////////////////////////////////////////////////////////////////////
// Default Constructor
Polygon::Polygon()
{

}

///////////////////////////////////////////////////////////////////////////
// Copy Constructor
Polygon::Polygon(Polygon & p)
{
	Init(p);
}

///////////////////////////////////////////////////////////////////////////
// Destructor
Polygon::~Polygon()
{
	Reset();
}

///////////////////////////////////////////////////////////////////////////
// Init default initializer
void Polygon::Init()
{

}

///////////////////////////////////////////////////////////////////////////
// Init copy initializer
void Polygon::Init(Polygon &p)
{
	Reset();

}

///////////////////////////////////////////////////////////////////////////
// Object eraser
void Polygon::Reset()
{

}

///////////////////////////////////////////////////////////////////////////
// Overloading of assignment operator
Polygon & Polygon::operator =(Polygon & p)
{
	Reset();
	Init(p);
	return *this;
}

///////////////////////////////////////////////////////////////////////////
// Overloading of comparison operator
bool Polygon::operator ==(Polygon & p)
{

	return true;
}

///////////////////////////////////////////////////////////////////////////
// Error messaging routine
void Polygon::ErrorMessage( const char *string )
{
	printf("%s\n", string);
}

///////////////////////////////////////////////////////////////////////////
// Debug routine
void Polygon::Dump()
{

}
